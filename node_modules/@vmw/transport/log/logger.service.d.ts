import { LogLevel } from './logger.model';
/**
 * This is the low-lever logger that can be instantiated and destroyed at will. Syslog maintains one of these
 * for use across the application, however, anyone can create an instance of this service and manage independent
 * Log Levels and output.
 */
export declare class Logger {
    get dateCss(): string;
    get fromCss(): string;
    get normalCss(): string;
    get errorCss(): string;
    get warnCss(): string;
    get infoCss(): string;
    get debugCss(): string;
    get verboseCss(): string;
    private _dateCss;
    private _fromCss;
    private _normalCss;
    private _errorCss;
    private _warnCss;
    private _infoCss;
    private _debugCss;
    private _verboseCss;
    private dateCssDark;
    private fromCssDark;
    private normalCssDark;
    private errorCssDark;
    private warnCssDark;
    private infoCssDark;
    private debugCssDark;
    private verboseCssDark;
    private _logLevel;
    private _suppress;
    private _silent;
    private _lastLog;
    private _styledLogsSupported;
    private useDarkThemeFriendlyColors;
    setStylingVisble(flag: boolean): void;
    useDarkTheme(flag: boolean): void;
    /**
     * Turn of all logging
     */
    turnOffAllLogging(): void;
    /**
     * Turn on all logging
     * Defaults to LogLevel.ERROR; Errors and critical issues only.
     */
    turnOnAllLogging(): void;
    /**
     * Turn on VERBOSE logging
     */
    turnOnVerboseLogging(): void;
    /**
     * Turn on DEBUG logging
     */
    turnOnDebugLogging(): void;
    /**
     * Turn on INFO logging
     */
    turnOnInfoLogging(): void;
    /**
     * Turn on WARN logging
     */
    turnOnWarnLogging(): void;
    /**
     * Turn on ERROR logging
     */
    turnOnErrorLogging(): void;
    /**
     * Returns the last item logged.
     *
     * @returns {string}
     */
    last(): string;
    /**
     * Clear the last log
     */
    clear(): void;
    /**
     * Sets the minimum level of logging.
     *
     * @param level
     */
    set logLevel(level: LogLevel);
    get logLevel(): LogLevel;
    get stylingVisble(): boolean;
    suppress(flag: boolean): void;
    silent(flag: boolean): void;
    /**
     * Log if the minimum is at or below LogLevel.verbose
     *
     * @param object
     * @param from optional caller filename
     */
    verbose(object: any, from?: string): void;
    /**
     * Log if the minimum is at or below LogLevel.debug
     *
     * @param object
     * @param from optional caller filename
     */
    debug(object: any, from?: string): void;
    /**
     * Log if the minimum is at or below LogLevel.info
     *
     * @param object
     * @param from optional caller filename
     */
    info(object: any, from?: string): void;
    /**
     * Log if the minimum is at or below LogLevel.warn
     *
     * @param object
     * @param from optional caller filename
     */
    warn(object: any, from?: string): void;
    /**
     * Log if the minimum is at or below LogLevel.error
     *
     * @param object
     * @param from optional caller filename
     */
    error(object: any, from?: string): void;
    /**
     * Log always
     *
     * @param object
     * @param from optional caller filename
     */
    always(object: any, from?: string): void;
    group(logLevel: LogLevel, label: string, suppress?: boolean): void;
    groupEnd(logLevel: LogLevel): void;
    private outputWithOptionalStyle;
    private log;
}
