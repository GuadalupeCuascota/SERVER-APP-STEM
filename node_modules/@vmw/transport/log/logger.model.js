/*
 * Copyright 2017-2018 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
/**
 * Channels for communication with the logger Service, and its message object.
 */
import { LogUtil } from './util';
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Verbose"] = 0] = "Verbose";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Warn"] = 3] = "Warn";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Off"] = 5] = "Off";
})(LogLevel || (LogLevel = {}));
export class LogChannel {
}
LogChannel.channel = '#Log'; // Used later for distributed logs
LogChannel.logLevel = 'LogLevel';
export class LogLevelObject {
    constructor() {
        this._logLevel = LogLevel.Warn;
    }
    build(logLevel) {
        this._logLevel = logLevel;
        return this;
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(level) {
        this._logLevel = level;
    }
}
export class LogObject {
    build(logLevel, channel, object, caller, suppress = false) {
        this._logLevel = logLevel;
        this._channel = channel;
        this._object = object;
        this._caller = caller;
        this._suppress = suppress;
        return this;
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(level) {
        this._logLevel = level;
    }
    get channel() {
        return this._channel;
    }
    set channel(chan) {
        this._channel = chan;
    }
    get object() {
        return this._object;
    }
    set object(object) {
        if (object.constructor !== String) { // stringify if not string object
            object = LogUtil.pretty(object);
        }
        this._object = object;
    }
    get caller() {
        return this._caller;
    }
    set caller(source) {
        this._caller = source;
    }
    get suppress() {
        return this._suppress;
    }
    set suppress(suppress) {
        this._suppress = suppress;
    }
}
//# sourceMappingURL=logger.model.js.map