/*
 * Copyright 2018-2020 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
import { TransportEventBus } from '../bus';
import { GeneralUtil } from './util';
/**
 * Test utility to encapsulate bus operations for test runs.
 */
export class BusUtil {
    /**
     * Get instance of the current bus instance.
     * @returns {EventBus} the bus
     */
    static getBusInstance() {
        return TransportEventBus.getInstance();
    }
    /**
     * Boot and create a singleton EventBus instance with default options
     * @returns {EventBus} the bus.
     */
    static bootBus() {
        return TransportEventBus.boot();
    }
    /**
     * Boot and create a singleton EventBus instance with custom options for logging level and boot message
     * @param {LogLevel} logLevel log level to set
     * @param {boolean} disableBootMessage set to true to turn off the boot message.
     * @param {boolean} darkTheme enables dark theme friendly logging output (defaults to off).
     * @returns {EventBus} the bus
     */
    static bootBusWithOptions(logLevel, disableBootMessage, darkTheme = false) {
        return TransportEventBus.bootWithOptions(logLevel, disableBootMessage, darkTheme);
    }
    /**
     * Destroy the bus.
     */
    static destroy() {
        TransportEventBus.destroy();
    }
    /**
     * Return connection string used to establish and manage one or more Fabric connections.
     *
     * @param {string} host hostname where Fabric backend is served
     * @param {number} port port where Fabric backend is served
     * @param {string} endpoint target endpoint
     *
     * @deprecated Use GeneralUtil.getFabricConnectionString()
     */
    static getFabricConnectionString(host, port, endpoint) {
        return GeneralUtil.getFabricConnectionString(host, port, endpoint);
    }
}
//# sourceMappingURL=bus.util.js.map