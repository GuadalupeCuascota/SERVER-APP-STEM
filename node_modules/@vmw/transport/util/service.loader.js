/*
 * Copyright 2018-2019 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
export class ServiceLoader {
    static addService(service, ...args) {
        let foundService = null;
        for (let serviceInstance of ServiceLoader.serviceCollection) {
            if (serviceInstance instanceof service) {
                foundService = serviceInstance;
            }
        }
        if (!foundService) {
            const instance = new service(...args);
            ServiceLoader.serviceCollection.add(instance);
            return instance;
        }
        else {
            return foundService;
        }
    }
    static getLoadedServices() {
        return new Set(ServiceLoader.serviceCollection.values());
    }
    static destroyAllServices() {
        ServiceLoader.serviceCollection.forEach((service) => {
            ServiceLoader.serviceCollection.delete(service);
        });
        ServiceLoader.serviceCollection = new Set(); //  bye!
    }
    static destroyService(service) {
        ServiceLoader.serviceCollection.forEach((currentService) => {
            if (currentService.constructor.name === service.name) {
                if (currentService.hasOwnProperty('offline')) {
                    currentService.offline();
                }
                ServiceLoader.serviceCollection.delete(currentService);
            }
        });
    }
    static getService(service) {
        let locatedService = null;
        ServiceLoader.serviceCollection.forEach((currentService) => {
            if (currentService.constructor.name === service.name) {
                locatedService = currentService;
            }
        });
        return locatedService;
    }
    /**
     * Get a reference directly to the local RestService
     */
    static getRestService() {
        let restService = null;
        ServiceLoader.serviceCollection.forEach((currentService) => {
            if (currentService.hasOwnProperty('isRestService')) {
                restService = currentService;
            }
        });
        return restService;
    }
    static offlineLocalRestService() {
        ServiceLoader.getRestService().offline();
    }
    static onlineLocalRestService() {
        ServiceLoader.getRestService().online();
    }
}
ServiceLoader.serviceCollection = new Set();
//# sourceMappingURL=service.loader.js.map