/*
 * Copyright 2018-2019 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
/**
 * Channels for communication with the ReST Service, and its message object.
 */
import { GeneralError } from '../../model/error.model';
import { AbstractFrame } from '../../../bus/model/abstractframe.model';
export var HttpRequest;
(function (HttpRequest) {
    HttpRequest["Get"] = "GET";
    HttpRequest["Post"] = "POST";
    HttpRequest["Patch"] = "PATCH";
    HttpRequest["Delete"] = "DELETE";
    HttpRequest["Put"] = "PUT";
    HttpRequest["UpdateGlobalHeaders"] = "UpdateGlobalHeaders";
    HttpRequest["SetRestServiceHostOptions"] = "SetRestServiceHostOptions";
    HttpRequest["DisableCORSAndCredentials"] = "DisableCORSAndCredentials";
    HttpRequest["ConfigureCORSAndCredentials"] = "ConfigureCORSAndCredentials";
})(HttpRequest || (HttpRequest = {}));
export var RestErrorType;
(function (RestErrorType) {
    RestErrorType[RestErrorType["UnknownMethod"] = 0] = "UnknownMethod";
})(RestErrorType || (RestErrorType = {}));
/**
 * This is the error class that is returned from the ReST service on HTTP error.
 */
export class RestError extends GeneralError {
    constructor(message, status, url) {
        super(message, status);
        this.message = message;
        this.status = status;
        this.url = url;
        this.url = url;
    }
}
export class RestObject extends AbstractFrame {
    constructor(request, uri, body = null, headers = {}, queryStringParams = {}, pathParams = {}, apiClass, senderName) {
        super();
        this.apiClass = apiClass;
        this.senderName = senderName;
        this.request = request;
        this.method = request;
        this.uri = uri;
        this.body = body;
        this.headers = headers;
        this.pathParams = pathParams;
        this.queryStringParams = queryStringParams;
    }
}
//# sourceMappingURL=rest.model.js.map