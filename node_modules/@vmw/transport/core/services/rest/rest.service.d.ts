import { EventBusEnabled } from '../../../bus.api';
import { AbstractCore } from '../../abstractions/abstract.core';
import { HttpClient } from './http.client';
import { FabricService } from '../../abstractions/fabric.service';
export declare enum RequestCorsMode {
    SAME_ORIGIN = "same-origin",
    NO_CORS = "no-cors",
    CORS = "cors",
    NAVIGATE = "navigate"
}
export declare enum RequestCredentialsMode {
    OMIT = "omit",
    SAME_ORIGIN = "same-origin",
    INCLUDE = "include"
}
export interface RequestConfigureBody {
    corsMode: RequestCorsMode;
    credentialsMode: RequestCredentialsMode;
}
/**
 * REST Service that operates standard functions on behalf of consumers and services.
 */
export declare class RestService extends AbstractCore implements EventBusEnabled, FabricService {
    static channel: string;
    private headers;
    private headerStore;
    private name;
    private httpClient;
    private globalBaseUri;
    private corsMode;
    private credentialsMode;
    private disableCorsAndCredentials;
    private restStream;
    readonly isRestService = true;
    getName(): string;
    constructor(httpClient?: HttpClient);
    private listenForRequests;
    private updateHeaders;
    private updateHostOptions;
    private disableCORS;
    private updateCorsModeAndCredentials;
    private handleData;
    private handleError;
    private doHttpRequest;
    private generateRequestInitObject;
    offline(): void;
    online(): void;
}
