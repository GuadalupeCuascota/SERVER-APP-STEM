import { AbstractMessageObject } from '../../abstractions/abstract.messageobject';
import { ServiceVersion } from '../../abstractions/service.version';
export declare enum FakeRequest {
    BadRequest = 0,
    RestRelay = 1,
    ApiCall = 2,
    GetServiceVersion = 3
}
export declare class FakeChannel {
    static request: string;
}
export declare class FakeRestRelayRequestObject extends AbstractMessageObject<FakeRequest, any> {
    constructor(requestChannel: string, payload: any);
}
export declare class FakeRestRelayResponseObject extends AbstractMessageObject<FakeRequest, any> {
    constructor(response?: any);
}
export declare class FakeApiCallRequestObject extends AbstractMessageObject<FakeRequest, any> {
    constructor(requestChannel: string, payload: string);
}
export declare class FakeApiCallResponseObject extends AbstractMessageObject<FakeRequest, any> {
    constructor(response?: ServiceVersion);
}
export declare class FakeGetServiceVersionRequestObject extends AbstractMessageObject<FakeRequest, any> {
    constructor(requestChannel: string);
}
export declare class FakeGenericRequestObject extends AbstractMessageObject<FakeRequest, any> {
    constructor(requestChannel: string, request: FakeRequest);
}
export declare class FakeGetServiceVersionResponseObject extends AbstractMessageObject<FakeRequest, ServiceVersion> {
    constructor(response?: ServiceVersion);
}
export declare type FakeRequestObject = FakeGetServiceVersionRequestObject | FakeRestRelayRequestObject | FakeApiCallRequestObject | FakeGenericRequestObject;
export declare type FakeResponseObject = FakeRestRelayResponseObject | FakeApiCallResponseObject | FakeGetServiceVersionResponseObject;
