/*
 * Copyright 2018 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
// These are mock objects for use by FakeService
// They are only used for tests and excluded from production build
import { AbstractMessageObject } from '../../abstractions/abstract.messageobject';
// Enumeration of all requests handled by FakeService
export var FakeRequest;
(function (FakeRequest) {
    FakeRequest[FakeRequest["BadRequest"] = 0] = "BadRequest";
    FakeRequest[FakeRequest["RestRelay"] = 1] = "RestRelay";
    FakeRequest[FakeRequest["ApiCall"] = 2] = "ApiCall";
    FakeRequest[FakeRequest["GetServiceVersion"] = 3] = "GetServiceVersion"; // Return the version fo this service
})(FakeRequest || (FakeRequest = {}));
export class FakeChannel {
}
FakeChannel.request = '#-fake-service-request';
// This is the request object with payload to relay to RestService
export class FakeRestRelayRequestObject extends AbstractMessageObject {
    constructor(requestChannel, payload) {
        super(FakeRequest.RestRelay, requestChannel, payload);
    }
}
// This is the response object for the relay to RestService
export class FakeRestRelayResponseObject extends AbstractMessageObject {
    constructor(response) {
        super(FakeRequest.RestRelay, '', response);
    }
}
// This is the request object for the GetServiceVersionRequest to FakeService
export class FakeApiCallRequestObject extends AbstractMessageObject {
    constructor(requestChannel, payload) {
        super(FakeRequest.ApiCall, requestChannel, payload);
    }
}
// This is the response object for the GetServiceVersionRequest to FakeService
export class FakeApiCallResponseObject extends AbstractMessageObject {
    constructor(response) {
        super(FakeRequest.ApiCall, '', response);
    }
}
// This is the request object for the GetServiceVersionRequest to FakeService
export class FakeGetServiceVersionRequestObject extends AbstractMessageObject {
    constructor(requestChannel) {
        super(FakeRequest.GetServiceVersion, requestChannel);
    }
}
// This is a generic request object for testing bad requests
export class FakeGenericRequestObject extends AbstractMessageObject {
    constructor(requestChannel, request) {
        super(request, requestChannel);
    }
}
// This is the response object for the GetServiceVersionRequest to FakeService
export class FakeGetServiceVersionResponseObject extends AbstractMessageObject {
    constructor(response) {
        super(FakeRequest.GetServiceVersion, '', response);
    }
}
//# sourceMappingURL=service.objects.mock.js.map