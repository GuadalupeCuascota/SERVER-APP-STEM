/*
 * Copyright 2018-2020 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
import { AbstractBase } from './abstract.base';
import { TransactionType } from '../../bus.api';
import { BusUtil } from '../../util/bus.util';
export class AbstractOperations extends AbstractBase {
    /**
     * Call a service via the event bus
     *
     * @param channel the channel on which the service is listening on
     * @param request the request object you want to send to the service.
     * @param successHandler handle the successful response from the service.
     * @param errorHandler handle any errors that are caught or thrown by the service.
     */
    callService(channel, request, successHandler, errorHandler) {
        var _a;
        const bus = BusUtil.getBusInstance();
        const transaction = bus.createTransaction(TransactionType.ASYNC, this.getName());
        const execContext = (_a = bus.api.ngZone()) !== null && _a !== void 0 ? _a : { run: (fn) => fn() };
        if (bus.fabric.isXsrfTokenEnabled()) {
            request['headers'] = Object.assign(Object.assign({}, request['headers']), { [bus.fabric.getXsrfTokenStoreKey()]: bus.fabric.getXsrfToken() });
        }
        transaction.onComplete((responses) => {
            const transactionResults = responses.map(response => response.payload);
            execContext.run(() => successHandler(transactionResults.length === 1 ? transactionResults[0] : transactionResults));
        });
        transaction.onError((error) => {
            if (errorHandler) {
                execContext.run(() => errorHandler(error));
            }
        });
        transaction.sendRequest(channel, request);
        transaction.commit();
    }
}
//# sourceMappingURL=abstract.operations.js.map