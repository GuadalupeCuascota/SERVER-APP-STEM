/**
 * This is the abstract class for both request and response objects passed in messages to/from services
 */
import { AbstractFrame } from '../../bus/model/abstractframe.model';
export declare abstract class AbstractMessageObject<TRequest, TPayload> extends AbstractFrame {
    readonly request?: TRequest;
    readonly channel?: string | null | undefined;
    payload?: TPayload;
    headers?: {
        [key: string]: any;
    };
    /**
     * The AbstractMessageObject is the superclass for all service request and response objects.
     * Optional parameters are necessary for creating empty Response objects in typescript with generics
     *
     * @param request - enumerated TRequest
     * @param channel - string channel for service requests
     * @param payload - request and response payloads
     * @param headers - message headers
     */
    constructor(request?: TRequest, channel?: string | null | undefined, payload?: TPayload, headers?: {
        [key: string]: any;
    });
}
