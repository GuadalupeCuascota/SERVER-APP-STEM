import { BusTestUtil } from '../../util/test.util';
import { AbstractAutoRestMock } from './abstract.autorestmock';
import { HttpRequest, RestError, RestObject } from '..';
class AutoRestTest extends AbstractAutoRestMock {
    constructor() {
        super('AutoTestTest', 'myself');
    }
    testHandleData() {
        super.handleData('test', new RestObject(HttpRequest.Get, 'test'));
    }
    testHandleDataWithArgs() {
        super.handleData('test', new RestObject(HttpRequest.Get, 'test'), { version: 1, from: 'nowhere', uuid: '123' });
    }
    testHandleError() {
        super.handleError(new RestError('error'), new RestObject(HttpRequest.Get, 'test'), { version: 1, from: 'nowhere', uuid: '123' });
    }
    testUnHandledError() {
        super.unhandledError(new RestObject(HttpRequest.Get, 'test'), 'test');
    }
    handleRequest(method) {
        super.handleServiceRequest(new RestObject(method, 'test', null, null, null, null, null, 'myself'), { version: 1, from: 'nowhere', uuid: '123' });
    }
    testHandleServiceGetRequest() {
        this.handleRequest(HttpRequest.Get);
    }
    testHandleServiceForceError() {
        this.forceError = 'error';
        this.handleRequest(HttpRequest.Get);
    }
    testHandleServiceMustFail() {
        this.mustFail = true;
        this.handleRequest(HttpRequest.Get);
    }
    testHandleServiceForceResponse() {
        this.forceResponse = 'hello';
        this.handleRequest(HttpRequest.Get);
    }
    testHandleEmptyResponse() {
        this.forceResponse = null;
        this.handleRequest(HttpRequest.Get);
    }
    testHandleServicePostRequest() {
        this.handleRequest(HttpRequest.Post);
    }
    testHandleServicePatchRequest() {
        this.handleRequest(HttpRequest.Patch);
    }
    testHandleServicePutRequest() {
        this.handleRequest(HttpRequest.Put);
    }
    testHandleServiceDeleteRequest() {
        this.handleRequest(HttpRequest.Delete);
    }
    testHandleServiceUnknownRequest() {
        this.handleRequest(HttpRequest.DisableCORSAndCredentials);
    }
    httpGet(restRequestObject) {
        super.httpGet(restRequestObject);
        this.log.verbose('GET request handled');
    }
    httpPost(restRequestObject) {
        super.httpPost(restRequestObject);
        this.log.verbose('POST request handled');
    }
    httpPatch(restRequestObject) {
        super.httpPatch(restRequestObject);
        this.log.verbose('PATCH request handled');
    }
    httpPut(restRequestObject) {
        super.httpPut(restRequestObject);
        this.log.verbose('PUT request handled');
    }
    httpDelete(restRequestObject) {
        super.httpDelete(restRequestObject);
        this.log.verbose('DELETE request handled');
    }
}
describe('Transport Abstract AutoRestMock [cores/abstractions/abstract.autorestmock.spec]', () => {
    let bus;
    let test;
    beforeEach(() => {
        bus = BusTestUtil.bootBus();
        test = new AutoRestTest();
    });
    it('Check handleData() works', () => {
        spyOn(bus, 'sendResponseMessage').and.callThrough();
        test.testHandleData();
        expect(bus.sendResponseMessage).toHaveBeenCalled();
    });
    it('Check handleData() works with arguments', () => {
        spyOn(bus, 'sendResponseMessageWithId').and.callThrough();
        test.testHandleDataWithArgs();
        expect(bus.sendResponseMessageWithId).toHaveBeenCalled();
    });
    it('Check handleError() works', () => {
        spyOn(bus, 'sendErrorMessageWithId').and.callThrough();
        test.testHandleError();
        expect(bus.sendErrorMessageWithId).toHaveBeenCalled();
    });
    it('Check unhandledError() works', () => {
        spyOn(bus, 'sendErrorMessage').and.callThrough();
        test.testUnHandledError();
        expect(bus.sendErrorMessage).toHaveBeenCalled();
    });
    it('Check handleServiceRequest works for GET', () => {
        spyOn(bus.logger, 'verbose').and.callThrough();
        test.testHandleServiceGetRequest();
        expect(bus.logger.verbose).toHaveBeenCalledWith('GET request handled');
    });
    it('Check handleServiceRequest works for POST', () => {
        spyOn(bus.logger, 'verbose').and.callThrough();
        test.testHandleServicePostRequest();
        expect(bus.logger.verbose).toHaveBeenCalledWith('POST request handled');
    });
    it('Check handleServiceRequest works for PATCH', () => {
        spyOn(bus.logger, 'verbose').and.callThrough();
        test.testHandleServicePatchRequest();
        expect(bus.logger.verbose).toHaveBeenCalledWith('PATCH request handled');
    });
    it('Check handleServiceRequest works for PUT', () => {
        spyOn(bus.logger, 'verbose').and.callThrough();
        test.testHandleServicePutRequest();
        expect(bus.logger.verbose).toHaveBeenCalledWith('PUT request handled');
    });
    it('Check handleServiceRequest works for DELETE', () => {
        spyOn(bus.logger, 'verbose').and.callThrough();
        test.testHandleServiceDeleteRequest();
        expect(bus.logger.verbose).toHaveBeenCalledWith('DELETE request handled');
    });
    it('Check handleServiceRequest works for an unknown request', () => {
        test.testHandleServiceUnknownRequest();
        expect(bus.logger);
    });
    it('Check handleServiceRequest works for a custom forced error response', () => {
        spyOn(bus, 'sendErrorMessageWithId').and.callThrough();
        test.testHandleServiceForceError();
        expect(bus.sendErrorMessageWithId).toHaveBeenCalled();
    });
    it('Check handleServiceRequest works for a forced error response', () => {
        spyOn(bus, 'sendErrorMessageWithId').and.callThrough();
        test.testHandleServiceMustFail();
        expect(bus.sendErrorMessageWithId).toHaveBeenCalled();
    });
    it('Check forceResponse works', () => {
        spyOn(bus, 'sendResponseMessageWithId').and.callThrough();
        test.testHandleServiceForceResponse();
        expect(bus.sendResponseMessageWithId).toHaveBeenCalled();
    });
    it('Check empty response', () => {
        spyOn(bus.logger, 'error').and.callThrough();
        test.testHandleEmptyResponse();
        expect(bus.logger.error).toHaveBeenCalled();
    });
});
//# sourceMappingURL=abstract.autorestmock.spec.js.map