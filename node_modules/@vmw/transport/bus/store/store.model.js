/*
 * Copyright 2017-2019 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
export class MutationRequestWrapper {
    constructor(value, successHandler, errorHandler, uuid, stateChangeType) {
        this.value = value;
        this.successHandler = successHandler;
        this.errorHandler = errorHandler;
        this.uuid = uuid;
        this.stateChangeType = stateChangeType;
    }
}
export class BaseStoreState {
    constructor(changeType, objectValue) {
        this.changeType = changeType;
        this.objectValue = objectValue;
    }
    get type() {
        return this.changeType;
    }
    get value() {
        return this.objectValue;
    }
}
export class StoreStateChange extends BaseStoreState {
    constructor(objectId, changeType, objectValue) {
        super(changeType, objectValue);
        this.objectId = objectId;
    }
    get id() {
        return this.objectId;
    }
}
export class StoreStateMutation extends BaseStoreState {
    constructor(changeType, objectValue) {
        super(changeType, objectValue);
    }
    set errorHandler(handler) {
        this.pvtErrorHandler = handler;
    }
    get errorHandler() {
        return this.pvtErrorHandler;
    }
    set successHandler(handler) {
        this.pvtSuccessHandler = handler;
    }
    get successHandler() {
        return this.pvtSuccessHandler;
    }
}
/**
 * StoreMessageArgs contains additional information for store change messages
 * like the id of the object which was changed and the state change type.
 */
export class StoreMessageArgs {
    constructor(uuid, changeType) {
        this.version = 1;
        this.from = '';
        this.uuid = uuid;
        this.stateChangeType = changeType;
    }
}
export class StoreStreamImpl {
    constructor(stream, log) {
        this.stream = stream;
        this.log = log;
    }
    subscribe(successHandler) {
        this.subscription = this.stream.subscribe((req) => {
            if (successHandler) {
                // forward onto subscriber.
                successHandler(req.value, new StoreMessageArgs(req.uuid, req.stateChangeType));
            }
            else {
                this.log.error('unable to handle cache stream event, no handler provided.', 'StoreStream');
            }
        });
        return this.subscription;
    }
    unsubscribe() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
export class MutateStreamImpl extends StoreStreamImpl {
    constructor(stream, log) {
        super(stream, log);
        this.stream = stream;
    }
    subscribe(successHandler) {
        this.subscription = this.stream.subscribe((req) => {
            if (successHandler) {
                if (req.errorHandler) {
                    // capture mutator error handler.
                    this.mutatorErrorHandler = req.errorHandler;
                }
                if (req.successHandler) {
                    // capture mutator success handler.
                    this.mutatorSuccessHandler = req.successHandler;
                }
                // forward onto subscriber.
                successHandler(req.value);
            }
            else {
                this.log.error('unable to handle cache stream event, no handler provided.', 'MutateStream');
            }
        });
        return this.subscription;
    }
    error(error) {
        if (this.mutatorErrorHandler) {
            // push off to the event loop to ensure async exec of mutator logic.
            setTimeout(() => this.mutatorErrorHandler(error));
        }
        else {
            this.log.error('unable to send error event back to mutator, no error handler provided.', 'MutateStream');
        }
    }
    success(success) {
        if (this.mutatorSuccessHandler) {
            // push off to the event loop to ensure async exec of mutator logic.
            setTimeout(() => this.mutatorSuccessHandler(success));
        }
        else {
            this.log.error('unable to send success event back to mutator, ' +
                'no success handler provided.', 'MutateStream');
        }
    }
}
//# sourceMappingURL=store.model.js.map