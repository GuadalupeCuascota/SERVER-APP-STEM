import { UUID, StoreType } from './store.model';
import { BusStore, StoreStream, MutateStream } from '../../store.api';
import { EventBus, EventBusEnabled, MessageFunction } from '../../bus.api';
export declare class StoreImpl<T> implements BusStore<T>, EventBusEnabled {
    private bus;
    private type;
    private galacticStoreSyncChannel;
    private uuid;
    private reloadHandler;
    private reloadTTL;
    private reloadIntervalTracker;
    private log;
    getName(): string;
    private cache;
    private cacheStreamChan;
    private cacheMutationChan;
    private cacheReadyChan;
    private cacheInitialized;
    private name;
    private galacticStoreVersion;
    private syncChannelMessageHandler;
    private connectionMessageHandler;
    private isGalactic;
    getObjectChannel(id: UUID): UUID;
    constructor(bus: EventBus, type: StoreType, galacticStoreSyncChannel?: string);
    private initGalacticStore;
    closeStore(): void;
    private requestStoreContent;
    private sendChangeBroadcast;
    allValues(): Array<T>;
    allValuesAsMap(): Map<UUID, T>;
    populate(items: Map<UUID, T>): boolean;
    put<S>(id: UUID, value: T, state: S): void;
    private putLocal;
    private putGalactic;
    remove<S>(id: UUID, state: S): boolean;
    private removeLocal;
    private removeGalactic;
    get(id: UUID): T;
    isGalacticStore(): boolean;
    onChange<S>(id: UUID, ...stateChangeType: S[]): StoreStream<T>;
    onAllChanges<S>(...stateChangeType: S[]): StoreStream<T>;
    private filterStream;
    mutate<V, M, S, E>(value: V, mutationType: M, successHandler: MessageFunction<S>, errorHandler?: MessageFunction<E>): boolean;
    onMutationRequest<M, E = any>(objectType: T, ...mutationType: M[]): MutateStream<T, E>;
    reset(): void;
    whenReady(readyFunction: MessageFunction<Map<UUID, T>>): void;
    initialize(): void;
    startAutoReload(timeToLiveInMs?: number): void;
    stopAutoReload(): void;
    refreshApiDelay(): void;
    reloadStore(): void;
    setAutoReloadServiceTrigger(serviceCallFunction: Function): void;
}
