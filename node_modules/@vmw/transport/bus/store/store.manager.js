/*
 * Copyright 2018-2020 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
import { StoreImpl } from './store';
import { GeneralUtil } from '../../util/util';
/**
 * Copyright(c) VMware Inc. 2016-2019
 */
export class StoreManager {
    constructor(bus) {
        this.bus = bus;
        // Store map.
        this.internalStoreMap = new Map();
    }
    openGalacticStore(objectType, brokerIdentity) {
        this.initGalacticStoreSyncChannel(brokerIdentity);
        if (!this.getStore(objectType)) {
            this.bus.logger.verbose(`Store: Opening galactic store ${objectType} as it does not exist!`);
            const store = new StoreImpl(this.bus, objectType, this.galacticStoreSyncChannel);
            this.internalStoreMap.set(objectType, store);
            return store;
        }
        else {
            const store = this.getStore(objectType);
            if (!store.isGalacticStore()) {
                this.bus.logger.error('openGalacticStore() called with already existing local store!');
            }
            this.bus.logger.verbose(`Stores: Returning reference to ${objectType} as it already exists`);
            return store;
        }
    }
    createStore(objectType, map) {
        if (!this.getStore(objectType)) {
            this.bus.logger.verbose(`Store: Creating store ${objectType} as it does not exist!`);
            const store = new StoreImpl(this.bus, objectType);
            if (map) {
                store.populate(map);
            }
            this.internalStoreMap.set(objectType, store);
            return store;
        }
        else {
            const store = this.getStore(objectType);
            if (store.isGalacticStore()) {
                this.bus.logger.error('createStore() called with already existing galactic store!');
            }
            this.bus.logger.verbose(`Stores: Returning reference to ${objectType} as it already exists`);
            return store;
        }
    }
    getStore(objectType) {
        return this.internalStoreMap.get(objectType);
    }
    getAllStores() {
        return Array.from(this.internalStoreMap.values());
    }
    wipeAllStores() {
        this.internalStoreMap.forEach((store) => {
            store.reset();
        });
        this.bus.logger.warn(`🗄️ Stores: All data has been wiped out and reset.`, 'StoreManager');
    }
    destroyStore(objectType) {
        if (this.internalStoreMap.has(objectType)) {
            const store = this.internalStoreMap.get(objectType);
            store.closeStore();
            this.internalStoreMap.delete(objectType);
            return true;
        }
        return false;
    }
    readyJoin(stores) {
        return {
            whenReady: (handler) => {
                let storesReady = 0;
                for (let store of stores) {
                    this.createStore(store).whenReady(() => {
                        storesReady++;
                        if (storesReady === stores.length) {
                            handler(Array.from(this.internalStoreMap.values()));
                        }
                    });
                }
            }
        };
    }
    initGalacticStoreSyncChannel(brokerIdentity) {
        if (this.galacticStoreSyncChannel) {
            return;
        }
        // Generate unique fabric-store-sync galactic channel name and open
        // the galactic channel.
        this.galacticStoreSyncChannel = 'fabric-store-sync.' +
            Date.now().toString(32) + '-' + GeneralUtil.genUUID();
        this.bus.markChannelAsGalactic(this.galacticStoreSyncChannel, brokerIdentity);
    }
}
//# sourceMappingURL=store.manager.js.map