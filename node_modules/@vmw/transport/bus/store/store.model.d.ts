import { StoreStream, MutateStream } from '../../store.api';
import { Subscription, Observable } from 'rxjs';
import { MessageArgs, MessageFunction, SentFrom } from '../../bus.api';
import { Logger } from '../../log';
export declare type UUID = string;
export declare type StoreType = string;
export declare class MutationRequestWrapper<T, E = any> {
    value: T;
    errorHandler: MessageFunction<E>;
    successHandler: MessageFunction<T>;
    uuid: UUID;
    stateChangeType: any;
    constructor(value: T, successHandler?: MessageFunction<T>, errorHandler?: MessageFunction<E>, uuid?: UUID, stateChangeType?: any);
}
export declare class BaseStoreState<T, V> {
    private changeType;
    private objectValue;
    constructor(changeType: T, objectValue: V);
    get type(): T;
    get value(): V;
}
export declare class StoreStateChange<T, V> extends BaseStoreState<T, V> {
    private objectId;
    constructor(objectId: UUID, changeType: T, objectValue: V);
    get id(): UUID;
}
export declare class StoreStateMutation<T, V, S = any, E = any> extends BaseStoreState<T, V> {
    private pvtErrorHandler;
    private pvtSuccessHandler;
    constructor(changeType: T, objectValue: V);
    set errorHandler(handler: MessageFunction<E>);
    get errorHandler(): MessageFunction<E>;
    set successHandler(handler: MessageFunction<S>);
    get successHandler(): MessageFunction<S>;
}
/**
 * StoreMessageArgs contains additional information for store change messages
 * like the id of the object which was changed and the state change type.
 */
export declare class StoreMessageArgs implements MessageArgs {
    stateChangeType: any | undefined;
    uuid: UUID;
    version: number;
    from: SentFrom;
    constructor(uuid: UUID, changeType?: any);
}
export declare class StoreStreamImpl<T, E = any> implements StoreStream<T> {
    protected stream: Observable<MutationRequestWrapper<T, E>>;
    protected log: Logger;
    protected subscription: Subscription;
    constructor(stream: Observable<MutationRequestWrapper<T, E>>, log: Logger);
    subscribe(successHandler: MessageFunction<T>): Subscription;
    unsubscribe(): void;
}
export declare class MutateStreamImpl<T, E = any> extends StoreStreamImpl<T> implements MutateStream<T, E> {
    protected stream: Observable<MutationRequestWrapper<T, E>>;
    protected mutatorErrorHandler: MessageFunction<E>;
    protected mutatorSuccessHandler: MessageFunction<T>;
    constructor(stream: Observable<MutationRequestWrapper<T, E>>, log: Logger);
    subscribe(successHandler: MessageFunction<T>): Subscription;
    error(error: E): void;
    success(success: T): void;
}
