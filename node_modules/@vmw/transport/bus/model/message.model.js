/*
 * Copyright 2017-2018 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
import { MessageType } from '../../bus.api';
/**
 * A Message object represents a single message on the message bus.
 * Messages can contain either a data payload or an error payload.
 * Messages can be a command, or a response. An error notification is always a response.
 * The content of the payload is opaque and its format is only decodable by the sender(s) and the receiver(s)
 *
 * This has beeen simplified to remove TypeScript getters and setters, this is because, when using postMesssage()
 * and various other mechanisms because of The structured clone algorithm issue and deserialzing object properties.
 * You end up with an untyped object that only has the private properties ('_privateVar') exposed, none of the
 * methods either. Causes a dirty object that breaks most typed logic at runtime.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm
 */
export class MessageHandlerConfig {
    constructor(sendChannel, body, singleResponse = true, returnChannel) {
        this.isHandlerConfig = true; // make it easy to determine we're dealing with a wrapped payload
        this.returnChannel = returnChannel;
        this.sendChannel = sendChannel;
        this.body = body;
        if (!this.returnChannel) {
            this.returnChannel = sendChannel;
        }
        this.singleResponse = singleResponse;
    }
}
export class Message {
    constructor(id, version = 1, proxy = false) {
        this.messageError = false;
        this.proxyRebroadcast = false;
        this.id = id;
        this.version = version;
        this.proxyRebroadcast = proxy;
    }
    build(type, payload, error = false) {
        this.messageError = error;
        this.payload = payload;
        this.type = type;
        return this;
    }
    request(payload) {
        return this.build(MessageType.MessageTypeRequest, payload);
    }
    response(payload) {
        return this.build(MessageType.MessageTypeResponse, payload);
    }
    error(error) {
        return this.build(MessageType.MessageTypeError, error, true);
    }
    isRequest() {
        return this.type === MessageType.MessageTypeRequest;
    }
    isResponse() {
        return this.type === MessageType.MessageTypeResponse;
    }
    isError() {
        return this.messageError;
    }
}
//# sourceMappingURL=message.model.js.map