/*
 * Copyright 2017-2019 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
/**
 * A monitor object is generated on each bus transaction. It contains notification of new channels,
 * destroyed channels, as well as channels who have been closed by a subscriber, but is still open
 * to other subscribers. You can call bus.refCount(channelName) to see how many subscribers there are
 * on a channel. bus.send() will also generate a MonitorObject with the transmitted data.
 *
 * As with all messagebus transactions, if there are no subscribers on the monitor channel, nothing
 * is transmitted.
 */
export class MonitorChannel {
}
MonitorChannel.stream = '#messagebus-monitor';
export var MonitorType;
(function (MonitorType) {
    MonitorType["MonitorCloseChannel"] = "Channel_Closed";
    MonitorType["MonitorGalacticUnsubscribe"] = "Galactic_Channel_Unsubscribed";
    MonitorType["MonitorCompleteChannel"] = "Channel_Completed";
    MonitorType["MonitorDestroyChannel"] = "Channel_Destroyed";
    MonitorType["MonitorObserverJoinedChannel"] = "Observer_Joined_Channel";
    MonitorType["MonitorObserverSubscribedChannel"] = "Observer_Unsubscribed_From_Channel ";
    MonitorType["MonitorObserverUnsubscribedChannel"] = "Observer_Unsubscribed";
    MonitorType["MonitorObserverLeftChannel"] = "Observer_Left_Channel";
    MonitorType["MonitorNewChannel"] = "New_Channel_Created";
    MonitorType["MonitorNewGalacticChannel"] = "New_Galactic_Channel_Created";
    MonitorType["MonitorData"] = "Channel_Data";
    MonitorType["MonitorGalacticData"] = "Galactic_Data";
    MonitorType["MonitorError"] = "Error";
    MonitorType["MonitorDropped"] = "Dropped";
    MonitorType["MonitorChildProxyRegistered"] = "Child_Proxy_Registered";
    MonitorType["MonitorChildProxyListening"] = "Child_Proxy_Listening";
    MonitorType["MonitorChildProxyNotListening"] = "Child_Proxy_Not_Listening";
    MonitorType["MonitorChildProxyUnRegistered"] = "Child_Proxy_UnRegistered";
    MonitorType["MonitorBrokerConnectorConnected"] = "Broker_Connector_Connected";
    MonitorType["MonitorBrokerConnectorDisconnected"] = "Broker_Connector_Disconnected";
})(MonitorType || (MonitorType = {}));
export class MonitorObject {
    build(type, channel, from, data) {
        this._type = type;
        this._from = from;
        this._channel = channel;
        this._data = data;
        return this;
    }
    get type() {
        return this._type;
    }
    set type(type) {
        this._type = type;
    }
    get from() {
        return this._from;
    }
    set from(from) {
        this._from = from;
    }
    get channel() {
        return this._channel;
    }
    set channel(channel) {
        this._channel = channel;
    }
    get data() {
        return this._data;
    }
    set data(data) {
        this._data = data;
    }
    isNewChannel() {
        return this._type && this._type === MonitorType.MonitorNewChannel;
    }
    isChannelGone() {
        return this._type && this._channel && this._type === MonitorType.MonitorDestroyChannel;
    }
    hasData() {
        return !!this._data;
    }
}
//# sourceMappingURL=monitor.model.js.map