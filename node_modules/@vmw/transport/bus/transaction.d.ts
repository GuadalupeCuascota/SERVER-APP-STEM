import { StoreType } from './store/store.model';
import { MessageFunction } from '../bus.api';
import { BusTransaction, TransactionReceipt, TransactionType, EventBus } from '../bus.api';
import { Logger } from '../log/logger.service';
/**
 * Copyright(c) VMware Inc. 2016-2018
 */
export declare class BusTransactionImpl implements BusTransaction {
    private requests;
    private transactionType;
    private transactionReceipt;
    private bus;
    private name;
    private completedHandler;
    private log;
    private id;
    private transactionErrorChannel;
    private completed;
    private transactionCompleteError;
    private syncStream;
    constructor(bus: EventBus, logger: Logger, transactionType?: TransactionType, name?: string);
    waitForStoreReady(store: StoreType): void;
    sendRequest<Req>(channel: string, payload: Req): void;
    onComplete<Resp>(completeHandler: MessageFunction<Resp[]>): void;
    commit(): TransactionReceipt;
    onError<T>(errorHandler: MessageFunction<T>): void;
    private sendRequestAndListen;
    private transactionErrored;
    private transactionCompleteHandler;
    private startAsyncTransaction;
    private transactionName;
    private startSyncTransaction;
    private transactionCompleted;
    private transactionCompletedMessage;
    private getExpectedHandlerCalls;
}
