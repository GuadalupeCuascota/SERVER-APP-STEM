/*
 * Copyright 2017-2019 VMware, Inc.
 * SPDX-License-Identifier: BSD-2-Clause
 */
import { StompParser } from './stomp.parser';
import { StompClient } from './stomp.client';
export class StompValidator {
    static validateMonitorMessage(msg) {
        let mo = msg.payload;
        if (mo && mo.channel) {
            return true;
        }
        return false;
    }
    static validateConnectionMessage(msg) {
        // TODO: validate command schema
        let busCommand = StompParser.extractStompBusCommandFromMessage(msg);
        switch (busCommand.command) {
            case StompClient.STOMP_CONNECT:
                if (busCommand.payload !== null) {
                    return true;
                }
                break;
            case StompClient.STOMP_DISCONNECT:
                if (busCommand.session !== null) {
                    return true;
                }
                break;
            default:
                break;
        }
        return false;
    }
    static validateSubscriptionMessage(msg) {
        // TODO: validate command schema
        let busCommand = StompParser.extractStompBusCommandFromMessage(msg);
        switch (busCommand.command) {
            case StompClient.STOMP_SUBSCRIBE:
                if (busCommand.payload !== null && busCommand.destination !== null) {
                    return true;
                }
                break;
            case StompClient.STOMP_UNSUBSCRIBE:
                if (busCommand.payload !== null && busCommand.destination !== null) {
                    return true;
                }
                break;
            default:
                break;
        }
        return false;
    }
    static validateInboundMessage(msg) {
        // TODO: validate command schema
        let busCommand = StompParser.extractStompBusCommandFromMessage(msg);
        switch (busCommand.command) {
            case StompClient.STOMP_SEND:
                if (busCommand.destination !== null && busCommand.session !== null) {
                    let message = busCommand.payload;
                    if (message && message.command === StompClient.STOMP_SEND
                        && message.body !== null) {
                        return true;
                    }
                }
                break;
            default:
                break;
        }
        return false;
    }
}
//# sourceMappingURL=stomp.validator.js.map