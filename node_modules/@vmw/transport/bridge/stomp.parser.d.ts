import { StompMessage, StompBusCommand, StompSubscription } from './stomp.model';
import { Message } from '../bus/model/message.model';
export declare class StompParser {
    static bufferToString(buf: ArrayBuffer): string;
    static stringToArrayBuffer(str: string): ArrayBuffer;
    static marshal(command: string, headers?: any, body?: any): string;
    static unmarshal(data: any): StompMessage;
    static byteCount(str: string): number;
    static frame(command: string, headers?: any, body?: any): StompMessage;
    static trim(str: string): string;
    /**
     * @deprecated Use GeneraUtil
     */
    static genUUID(): string;
    /**
     * @deprecated Use GeneraUtil
     */
    static genUUIDShort(): string;
    static extractStompBusCommandFromMessage(msg: Message): StompBusCommand;
    static extractStompMessageFromBusCommand(cmd: StompBusCommand): StompMessage;
    static extractStompMessageFromBusMessage(msg: Message): StompMessage;
    static generateStompBrokerSubscriptionRequest(sessionId: string, destination: string, subscriptionId: string, isQueue: boolean, brokerPrefix: string): StompSubscription;
    static generateStompBusCommand(command: string, sessionId?: string, destination?: string, payload?: any): StompBusCommand;
    static generateStompReadyMessage(message: string, headers?: Object): StompMessage;
    static convertChannelToSubscription(channel: string): string;
    static generateGalacticDesintation(dest: string, channel: string): string;
    static convertSubscriptionToChannel(subscription: string, topicOrQueueDesintation: string): string;
    static convertTopicOrQueueToChannel(subscription: string, brokerPrefix: string): string;
}
